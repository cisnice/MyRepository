<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />															<!-- annotation을 사용하기 위해 필수적으로 작성한다. -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />		<!-- 정적공용파일들을 모아놓은 폴더 지정. mapping은 URL경로, location은 물리적인 폴더 --> 
																								<!-- DispatcherServlet에서 Controller를 거치지 않고 URL로 직접 접근해서 바로 다운로드 -->			
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.mycompany.myapp" />				<!-- component -> "*Controller.java", 스프링이 관리해야할 객체 -->
																													<!-- DispatcherServlet 이 base-package 안의 모든 경로를 scan해서 @Controller 가 붙어있는 객체들을 찾는다. -->
																													<!-- base-package 밖에 @Controller를 작성하면 찾지 못한다. -->
	
</beans:beans>
