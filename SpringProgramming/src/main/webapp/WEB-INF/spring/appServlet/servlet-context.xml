<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />															<!-- annotation을 사용하기 위해 필수적으로 작성한다. -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />		<!-- 정적공용파일들을 모아놓은 폴더 지정. mapping은 URL경로, location은 물리적인 폴더 --> 
																								<!-- DispatcherServlet에서 Controller를 거치지 않고 URL로 직접 접근해서 바로 다운로드 -->			
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.mycompany.myapp" />				<!-- component -> "*Controller.java", 스프링이 관리해야할 객체 -->
																													<!-- DispatcherServlet 이 base-package 안의 모든 경로를 scan해서 @Controller 가 붙어있는 객체들을 찾는다. -->
																													<!-- base-package 밖에 @Controller를 작성하면 찾지 못한다. -->
																													
	<!-- B를 관리 객체로 생성 -->
	<beans:bean name="bObj" class="com.mycompany.myapp.exam09.B" />					<!-- 클래스명(첫문자 소문자)으로 이름 생성 -->	
	<!-- A를 관리 객체로 생성 -->
	<beans:bean name="aObj" class="com.mycompany.myapp.exam09.A" />
	<!-- ServiceA를 관리 객체로 생성 -->
	<beans:bean name="serviceAObj" class="com.mycompany.myapp.exam09.ServiceA" />
	<!-- ServiceB를 관리 객체로 생성 -->
	<beans:bean name="serviceBObj" class="com.mycompany.myapp.exam09.ServiceB" />
	<!-- interface ServiceC 를 구현한 ServiceCImpl1를 관리 객체로 생성 -->
	<beans:bean name="serviceCImpl1" class="com.mycompany.myapp.exam09.ServiceCImpl1" />
	<!-- interface ServiceD 를 구현한 ServiceCImpl2를 관리 객체로 생성 -->
	<beans:bean name="serviceCImpl2" class="com.mycompany.myapp.exam09.ServiceCImpl2" />
	<beans:bean name="serviceCImpl3" class="com.mycompany.myapp.exam09.ServiceCImpl3" />
	
	<!-- C를 관리 객체로 생성  -->
	<beans:bean name="c" class="com.mycompany.myapp.exam09.C" >	<!-- C클래스에 기본 생성자가 없다. -->
		<beans:constructor-arg ref="d" />											<!-- 객체참조  ref. D->C 생성자 주입 -->
	</beans:bean>
	
	<!-- D를 관리 객체로 생성  -->
	<beans:bean name="d" class="com.mycompany.myapp.exam09.D" />
	
	<!-- E를 관리 객체로 생성  -->
	<beans:bean name="e" class="com.mycompany.myapp.exam09.E">
		<beans:constructor-arg ref="bObj" />
		<beans:constructor-arg ref="d" />
	</beans:bean>
	
	<!-- F를 관리 객체로 생성  -->
	<beans:bean name="f" class="com.mycompany.myapp.exam09.F">
		<beans:constructor-arg ref="serviceAObj" />
		<beans:constructor-arg ref="serviceBObj" />
		<beans:constructor-arg ref="serviceCImpl1" />
	</beans:bean>
	
	<!-- Exam09Controller 객체를 찾아서 가져오기 --> 											<!-- 스프링은 기본적으로 싱글톤을 지향한다. 하나의 객체만 생성가능 -->
	<beans:bean name="exam09Controller" class="com.mycompany.myapp.exam09.Exam09Controller">
		<!-- Setter 주입 -->
		<!-- <beans:property name="setter 이름" ref="매개값으로 전달할 객체(관리객체이름)-위에서 생성한 b 객체" /> -->
		<beans:property name="b" ref="bObj" />													<!-- name에 setter 메소드에서 set을 빼고 첫문자를 소문자로 -->
		<beans:property name="a" ref="aObj" />	
		<beans:property name="serviceA" ref="serviceAObj" />					<!-- 값을 넘길때는 value, 객체를 넘길때는 ref -->
		<beans:property name="serviceB" ref="serviceBObj" />		
		<beans:property name="serviceC" ref="serviceCImpl1" />
		<!-- <beans:property name="serviceD" ref="serviceCImpl2" /> -->
		<beans:property name="serviceD" ref="serviceCImpl3" />	
		<beans:property name="c" ref="c" />		
		<beans:property name="e" ref="e" />
		<beans:property name="f" ref="f" />	
	</beans:bean>
	
	<!-- Connection Pool -->		<!-- 애플리케이션이 가지고있는 connection pool. servers/tomcat v8.0/context.xml 에 있는 pool 을 이용하기위해 주석처리  -->
 	<beans:bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"> 	
		<beans:property name="driverClass" value="oracle.jdbc.OracleDriver"/>
		<beans:property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:orcl"/>
		<beans:property name="user" value="tester1"/>
		<beans:property name="password" value="kosa12345"/>
		<beans:property name="maxPoolSize" value="3"/>
		<beans:property name="initialPoolSize" value="1"/>
		<beans:property name="acquireIncrement" value="1"/> 
		<beans:property name="minPoolSize" value="1"/>   
	</beans:bean>
	
	<!-- Tomcat이 가지고 있는 Connection Pool 사용 -->
	<!-- jee Tag 추가 -->
	<!-- <jee:jndi-lookup id="dataSource" jndi-name="jdbc/orcl"/>   -->
	
	<!-- JdbcTemplate 객체 생성. 위에서 생성한 dataSource 을 주입시킨다. -->
	<beans:bean name="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>	
</beans:beans>

